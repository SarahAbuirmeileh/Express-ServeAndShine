name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v3

    - name: Set image version (tag)
      id: image_version
      run: echo "gitsha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: login to Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: sarahabuirmeileh
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag ghcr.io/sarahabuirmeileh/serve-and-shine:${{ steps.image_version.outputs.gitsha }}

    - name: Publish Docker image
      run: docker push ghcr.io/sarahabuirmeileh/serve-and-shine:${{ steps.image_version.outputs.gitsha }}

    - name: Configure Docker Host
      uses: khaledez/configure-docker-host@v1
      with: 
        host: serve-and-shine-lb-2126130081.eu-west-2.elb.amazonaws.com
        user: github
        ssh-private-key: ${{ secrets.DEPLOYMENT_KEY }}

    - name: Deploy
      run: docker compose -f docker-compose-prod.yml up -d
      env: 
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        GIT_VERSION: ${{ steps.image_version.outputs.gitsha }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_NAME: ${{ secrets.DB_NAME }}
        AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_CERTIFICATES_BUCKET_NAME: ${{ secrets.AWS_CERTIFICATES_BUCKET_NAME }}
        PORT: ${{ secrets.PORT }}

  deploy_to_asg:

    runs-on: ubuntu-latest

    steps:
    - name: Get ASG Instances
      id: ec2_instances
      run: |
        # Use AWS CLI to describe the instances in your ASG
        instances=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names serve-and-shine-ASG- --query 'AutoScalingGroups[0].Instances[*].InstanceId' --output text)
        for instance_id in $instances; do
          ip=$(aws ec2 describe-instances --instance-ids $instance_id --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
          echo "Instance ID: $instance_id, IP: $ip" >> instances.txt
        done
        echo "::set-output name=instance_ips::$(cat instances.txt)"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: YOUR_REGION

    - name: Deploy to EC2 Instances
      run: |
        # Retrieve the IP addresses of EC2 instances from the previous step
        instance_ips=${{ steps.ec2_instances.outputs.instance_ips }}
        
        # Loop through the IPs and deploy to each one
        IFS=$'\n'
        for ip in $instance_ips; do
          echo "Deploying to EC2 instance at IP: $ip"
          # Set environment variables for this instance
          export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
          export GIT_VERSION="${{ steps.image_version.outputs.gitsha }}"
          export SECRET_KEY="${{ secrets.SECRET_KEY }}"
          export DB_HOST="${{ secrets.DB_HOST }}"
          export DB_PORT="${{ secrets.DB_PORT }}"
          export DB_USERNAME="${{ secrets.DB_USERNAME }}"
          export DB_NAME="${{ secrets.DB_NAME }}"
          export AWS_BUCKET_NAME="${{ secrets.AWS_BUCKET_NAME }}"
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_REGION="${{ secrets.AWS_REGION }}"
          export AWS_CERTIFICATES_BUCKET_NAME="${{ secrets.AWS_CERTIFICATES_BUCKET_NAME }}"
          export PORT="${{ secrets.PORT }}"

          # Now you can use these environment variables in your deployment commands
          ssh -i <your_ssh_key> ec2-user@$ip "your_deploy_command_with_environment_variables"

          # Clear the environment variables to avoid conflicts in the next iteration
          unset DB_PASSWORD GIT_VERSION SECRET_KEY DB_HOST DB_PORT DB_USERNAME DB_NAME AWS_BUCKET_NAME AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_REGION AWS_CERTIFICATES_BUCKET_NAME PORT
        done
      env:
        SSH_PRIVATE_KEY: ${{ secrets.DEPLOYMENT_KEY }}

